#File Generated by ALCOR 

function GENERATE_ALCOR_FILE(){
  # SEED_RANGE=$1
  # AUX_SEQ=$2
  # LOWEST_SIZE=$3
  # OUT_FILE=$4
#local OUT_FILE=""
read -p "Define the seed range: " SEED_RANGE
read -p "Define the number of auxiliary sequences used: " AUX_SEQ
#read -p "Define the increment factor to be used on sequence sizes " INCREMENT_FACTOR
#echo "The first $SEED_RANGE prime numbers  are: "
read -p "Define the lowest sequence size to be considered: " LOWEST_SIZE
read -p "Output file name: " OUT_FILE

declare -a seed_arr=()

length=0
rm $OUT_FILE


input="prime_numbers.seq"
while IFS= read -r line
do
 seed_arr+=($(echo $line))
 #length=$(($length+1))
 #echo $length
done < "$input"

#echo ${#seed_arr[@]}

 #j=$((${#seed_arr[@]}-1))
 j=$(($SEED_RANGE-1))

#for x in {1..$AUX_SEQ}
for((x=1;x<=$AUX_SEQ;x++ ))
do 
 if [ $j -eq 0 ];then
   #j=$((${#seed_arr[@]}-1))
   j=$(($SEED_RANGE-1))
   echo "j:"$j
 else
   j=$(($j-1))
fi 
 size=$(($LOWEST_SIZE*$x))
 #size=$(($size+$INCREMENT))
 #INCREMENT=$(($INCREMENT_FACTOR*$LOWEST_SIZE))
 #echo ${seed_arr[x]}
 seed=${seed_arr[$j]}
 #echo $seed
 
 #echo $size
 AlcoR simulation -rs $size:0:$seed:0:0:0 > sequence_$x.fasta
done

#for x in {0...$SEED_RANGE}
#for((x=0;x<${#seed_arr[@]}; x++ ))
#x=$((${#seed_arr[@]}-1))
#x=$(($SEED_RANGE-1))
#j=$(($x-1)) 
#size=$(($size+$INCREMENT))
for((x=0;x<$SEED_RANGE; x++ ))
do
 for y in {0..1}
 do
   #for z in {1..$AUX_SEQ}
   for((z=1;z<=$AUX_SEQ; z++ ))
   do
   #  if [ $x -eq 0 ];then
   #    #x=$((${#seed_arr[@]}-1))
   #    x=$(($SEED_RANGE-1))
   #   else
   #    x=$(($x-1))
   #   fi 
    #size=$(($LOWEST_SIZE*$z))
    size=$(($LOWEST_SIZE*$z))
    #echo $size
    #echo $z
    seed=${seed_arr[x]}
   #if [ $size -eq $LOWEST_SIZE ] 
    #then
    AlcoR simulation -fs 1:$size:0:$seed:0.0$y:0:0:sequence_$z.fasta >> $OUT_FILE
   #else
   # if [ $z -gt $valid_z ]
    # then
    #AlcoR simulation -fs 1:$size:0:${seed_arr[$j]}:0.0$y:0:0:sequence_$z.fasta >> $OUT_FILE
    #fi
   done
  done
 done
####    
sed -i '/^$/d' $OUT_FILE  
echo $OUT_FILE
}


function JARVIS3_COMPRESSION(){
  IN_FILE="$1";
  LEVEL="$2";
  PARTITION="$3";
  PARTITION_MB="$4"

  IN_FILE_SHORT_NAME=$(ls -1 $IN_FILE | sed 's/.fasta//g')
  echo $IN_FILE_SHORT_NAME
  # PARTITION_MB=$(cat $PARTITION | sed 's/MB//g')
  # if [[ $PARTITION == "1GB" ]] then
  #   PARTITION_MB="1000"
  # fi

  { /bin/time -f "TIME\t%e\tMEM\t%M" ./JARVIS3.sh -l $LEVEL --block $PARTITION --fasta -i $IN_FILE ; } 2>> $IN_FILE_SHORT_NAME-$PARTITION_MB-l$LEVEL.txt
  { /bin/time -f "TIME\t%e\tMEM\t%M" ./JARVIS3.sh -l $LEVEL --block $PARTITION --fasta -i sort_$IN_FILE ; } 2>> $IN_FILE_SHORT_NAME-sort_$PARTITION_MB-l$LEVEL.txt
  { /bin/time -f "TIME\t%e\tMEM\t%M" ./JARVIS3.sh -l $LEVEL --block $PARTITION --fasta -i sort_fanalysis_$IN_FILE ; } 2>> $IN_FILE_SHORT_NAME-sort_fa_$PARTITION_MB-l$LEVEL.txt

  { ls $IN_FILE* -la -ltr | grep \.tar$ | awk '{print $5;}'; } >> $IN_FILE_SHORT_NAME-size_$PARTITION_MB-l$LEVEL.txt
  { ls sort_$IN_FILE* -la -ltr | grep \.tar$ | awk '{print $5;}'; } >> $IN_FILE_SHORT_NAME-size_$PARTITION_MB-l$LEVEL.txt
  { ls sort_fanalysis_$IN_FILE* -la -ltr | grep \.tar$ | awk '{print $5;}'; } >> $IN_FILE_SHORT_NAME-size_$PARTITION_MB-l$LEVEL.txt

  { /bin/time -f "TIME\t%e\tMEM\t%M" ./JARVIS3.sh -d -l $LEVEL --fasta -i $IN_FILE.tar ;  } 2>> $IN_FILE_SHORT_NAME-d_$PARTITION_MB-l$LEVEL.txt
  { /bin/time -f "TIME\t%e\tMEM\t%M" ./JARVIS3.sh -d -l $LEVEL --fasta -i sort_$IN_FILE.tar ;  } 2>> $IN_FILE_SHORT_NAME-sort_d_$PARTITION-l$LEVEL.txt
  { /bin/time -f "TIME\t%e\tMEM\t%M" ./JARVIS3.sh -d -l $LEVEL --fasta -i sort_fanalysis_$IN_FILE.tar ;  } 2>> $IN_FILE_SHORT_NAME-sort_fa_d_$PARTITION-l$LEVEL.txt

  { ls $IN_FILE* -la -ltr | grep \.tar.out$ |awk '{print $5;}'; } >> $IN_FILE_SHORT_NAME-size_d_$PARTITION-l$LEVEL.txt
  { ls sort_$IN_FILE* -la -ltr | grep \.tar.out$ |awk '{print $5;}'; } >> $IN_FILE_SHORT_NAME-size_d_$PARTITION-l$LEVEL.txt
  { ls sort_fanalysis_$IN_FILE* -la -ltr | grep \.tar.out$ |awk '{print $5;}'; } >> $IN_FILE_SHORT_NAME-size_d_$PARTITION-l$LEVEL.txt


}


function NAF_COMPRESSION() {
  IN_FILE="$1";
  LEVEL="$2";

  IN_FILE_SHORT_NAME=$(ls -1 $IN_FILE | sed 's/.fasta//g')
  echo $IN_FILE_SHORT_NAME

{ /bin/time -f "TIME\t%e\tMEM\t%M"  ennaf --strict --temp-dir tmp/ --dna --level $LEVEL $IN_FILE ; } 2>>$IN_FILE_SHORT_NAME-naf_l$LEVEL.txt
{ /bin/time -f "TIME\t%e\tMEM\t%M"  ennaf --strict --temp-dir tmp/ --dna --level $LEVEL sort_$IN_FILE ; } 2>>$IN_FILE_SHORT_NAME-sort_naf_l$LEVEL.txt
{ /bin/time -f "TIME\t%e\tMEM\t%M"  ennaf --strict --temp-dir tmp/ --dna --level $LEVEL sort_fanalysis_$IN_FILE ; } 2>>$IN_FILE_SHORT_NAME-sort_fa_naf_l$LEVEL.txt

{ ls $IN_FILE* -la -ltr | grep \.naf$ |awk '{print $5;}' ; } >> $IN_FILE_SHORT_NAME-naf_size_l$LEVEL.txt
{ ls sort_$IN_FILE* -la -ltr | grep \.naf$ |awk '{print $5;}'; } >> $IN_FILE_SHORT_NAME-sort_naf_size_l$LEVEL.txt
{ ls sort_fanalysis_$IN_FILE* -la -ltr | grep \.naf$ |awk '{print $5;}'; } >> $IN_FILE_SHORT_NAME-sort_fa_naf_size_l$LEVEL.txt

{ /bin/time -f "TIME\t%e\tMEM\t%M" unnaf  $IN_FILE.naf -o $IN_FILE-naf.fasta ; } 2>>$IN_FILE_SHORT_NAME-unnaf_l$LEVEL.txt
{ /bin/time -f "TIME\t%e\tMEM\t%M" unnaf  sort_$IN_FILE.naf -o sort_$IN_FILE-naf.fasta ; } 2>>$IN_FILE_SHORT_NAME-sort_unnaf_l$LEVEL.txt
{ /bin/time -f "TIME\t%e\tMEM\t%M" unnaf  sort_fanalysis_$IN_FILE.naf -o sort_fanalysis_$IN_FILE-naf.fasta ; } 2>>$IN_FILE_SHORT_NAME-sort_fa_unnaf_l$LEVEL.txt

{ ls $IN_FILE* -la -ltr | grep \._naf.fasta$ |awk '{print $5;}' ; } >> $IN_FILE_SHORT_NAME-unnaf_size_l$LEVEL.txt
{ ls sort_$IN_FILE* -la -ltr | grep \._naf.fasta$ |awk '{print $5;}'; } >> $IN_FILE_SHORT_NAME-sort_unnaf_size_l$LEVEL.txt
{ ls sort_fanalysis_$IN_FILE* -la -ltr | grep \._naf.fasta$ |awk '{print $5;}'; } >> $IN_FILE_SHORT_NAME-sort_fa_unnaf_size_l$LEVEL.txt

}

function MBGC_COMPRESSION() {
  IN_FILE="$1";
  LEVEL="$2";

  IN_FILE_SHORT_NAME=$(ls -1 $IN_FILE | sed 's/.fasta//g')
  echo $IN_FILE_SHORT_NAME

{ /bin/time -f "TIME\t%e\tMEM\t%M" mbgc -c=$LEVEL -i $IN_FILE $IN_FILE_SHORT_NAME.mbgc ; } 2>>$IN_FILE_SHORT_NAME-mbgc_l$LEVEL.txt 
{ /bin/time -f "TIME\t%e\tMEM\t%M" mbgc -c=$LEVEL -i sort_$IN_FILE sort_$IN_FILE_SHORT_NAME.mbgc ; } 2>>$IN_FILE_SHORT_NAME-sort_mbgc_l$LEVEL.txt
{ /bin/time -f "TIME\t%e\tMEM\t%M" mbgc -c=$LEVEL -i sort_fanalysis_$IN_FILE sort_fanalysis_$IN_FILE_SHORT_NAME.mbgc ; } 2>>$IN_FILE_SHORT_NAME-sort_fa_mbgc_l$LEVEL.txt

{ ls $IN_FILE_SHORT_NAME* -la -ltr | grep \.mbgc$ |awk '{print $5;}' ; } >> $IN_FILE_SHORT_NAME-mbgc_size_l$LEVEL.txt
{ ls sort_$IN_FILE_SHORT_NAME* -la -ltr | grep \.mbgc$ |awk '{print $5;}'; } >>  $IN_FILE_SHORT_NAME-sort_mbgc_size_l$LEVEL.txt
{ ls sort_fanalysis_$IN_FILE_SHORT_NAME* -la -ltr | grep \.mbgc$ |awk '{print $5;}'; } >> $IN_FILE_SHORT_NAME-sort_fa_mbgc_size_l$LEVEL.txt

{ /bin/time -f "TIME\t%e\tMEM\t%M" mbgc -d -i $IN_FILE_SHORT_NAME.mbgc $IN_FILE_SHORT_NAME.mbgc.fasta ; } 2>>$IN_FILE_SHORT_NAME-mbgc_d_l$LEVEL.txt 
{ /bin/time -f "TIME\t%e\tMEM\t%M" mbgc -d -i sort_$IN_FILE_SHORT_NAME.mbgc sort_$IN_FILE_SHORT_NAME.mbgc.fasta ; } 2>>$IN_FILE_SHORT_NAME-sort_mbgc_l$LEVEL.txt 
{ /bin/time -f "TIME\t%e\tMEM\t%M" mbgc -d -i sort_fanalysis_$IN_FILE_SHORT_NAME.mbgc sort_fanalysis_$IN_FILE_SHORT_NAME.mbgc.fasta ; } 2>>$IN_FILE_SHORT_NAME-sort_fa_mbgc_l$LEVEL.txt 

{ ls $IN_FILE_SHORT_NAME* -la -ltr | grep \.mbgc.fasta$ |awk '{print $5;}' ; } >>  $IN_FILE_SHORT_NAME-mbgc_d_size_l$LEVEL.txt
{ ls sort_$IN_FILE_SHORT_NAME* -la -ltr | grep \.mbgc.fasta$ |awk '{print $5;}'; } >> $IN_FILE_SHORT_NAME-sort_mbgc_d_size_l$LEVEL.txt
{ ls sort_fanalysis_$IN_FILE_SHORT_NAME* -la -ltr | grep \.mbgc.fasta$ |awk '{print $5;}'; } >> $IN_FILE_SHORT_NAME-sort_fa_mbgc_d_size_l$LEVEL.txt
  
}

function MFCOMPRESS_COMPRESSION(){
  IN_FILE="$1";
  LEVEL="$2";
  PARTITION="$3";

  IN_FILE_SHORT_NAME=$(ls -1 $IN_FILE | sed 's/.fasta//g')
  echo $IN_FILE_SHORT_NAME


{ /bin/time -f "TIME\t%e\tMEM\t%M" ./MFCompressC -v -$LEVEL -p $PARTITION -t 8 $IN_FILE ; } 2>>$IN_FILE_SHORT_NAME-mfc_l$LEVEL-p$PARTITION-t8.txt 
{ /bin/time -f "TIME\t%e\tMEM\t%M" ./MFCompressC -v -$LEVEL -p $PARTITION -t 8 sort_$IN_FILE ; } 2>>$IN_FILE_SHORT_NAME-sort_mfc_l$LEVEL-p$PARTITION-t8.txt 
{ /bin/time -f "TIME\t%e\tMEM\t%M" ./MFCompressC -v -$LEVEL -p $PARTITION -t 8 sort_fanalysis_$IN_FILE ; } 2>>$IN_FILE_SHORT_NAME-sort_fa_mfc_l$LEVEL-p$PARTITION-t8.txt 

{ ls $IN_FILE* -la -ltr | grep \.mfc$ |awk '{print $5;}' ; } >> $IN_FILE_SHORT_NAME-mfc_size_l$LEVEL-p$PARTITION-t8.txt
{ ls sort_$IN_FILE* -la -ltr | grep \.mfc$ |awk '{print $5;}'; } >> $IN_FILE_SHORT_NAME-sort_mfc_size_l$LEVEL-p$PARTITION-t8.txt
{ ls sort_fanalysis_$IN_FILE* -la -ltr | grep \.mfc$ |awk '{print $5;}'; } >> $IN_FILE_SHORT_NAME-sort_fa_mfc_size_l$LEVEL-p$PARTITION-t8.txt

{ /bin/time -f "TIME\t%e\tMEM\t%M" ./MFCompressD -v -$LEVEL -p $PARTITION -t 8 $IN_FILE ; } 2>> $IN_FILE_SHORT_NAME-mfc_d_l$LEVEL-p$PARTITION-t8.txt 
{ /bin/time -f "TIME\t%e\tMEM\t%M" ./MFCompressD -v -$LEVEL -p $PARTITION -t 8 sort_$IN_FILE ; } 2>>$IN_FILE_SHORT_NAME-sort_mfc_d_l$LEVEL-p$PARTITION-t8.txt
{ /bin/time -f "TIME\t%e\tMEM\t%M" ./MFCompressD -v -$LEVEL -p $PARTITION -t 8 sort_fanalysis_$IN_FILE ; } 2>>$IN_FILE_SHORT_NAME-sort_fa_mfc_d_l$LEVEL-p$PARTITION-t8.txt

{ ls $IN_FILE* -la -ltr | grep \.mfc.d$ |awk '{print $5;}' ; } >> $IN_FILE_SHORT_NAME-mfc_d_size_l$LEVEL-p$PARTITION-t8.txt
{ ls sort_$IN_FILE* -la -ltr | grep \.mfc.d$ |awk '{print $5;}'; } >> $IN_FILE_SHORT_NAME-sort_mfc_d_size_l$LEVEL-p$PARTITION-t8.txt
{ ls sort_fanalysis_$IN_FILE* -la -ltr | grep \.mfc.d$ |awk '{print $5;}'; } >> $IN_FILE_SHORT_NAME-sort_mfc_d_size_l$LEVEL-p$PARTITION-t8.txt
  
}

function GZIP_COMPRESSION(){
  IN_FILE="$1";
  LEVEL="$2";

  IN_FILE_SHORT_NAME=$(ls -1 $IN_FILE | sed 's/.fasta//g')
  echo $IN_FILE_SHORT_NAME

{ /bin/time -f "TIME\t%e\tMEM\t%M"  gzip -k -$LEVEL $IN_FILE y ; } 2>>$IN_FILE_SHORT_NAME-gzip_l$LEVEL.txt  
{ /bin/time -f "TIME\t%e\tMEM\t%M"  gzip -k -$LEVEL sort_$IN_FILE y ; } 2>>$IN_FILE_SHORT_NAME-sort_gzip_l$LEVEL.txt 
{ /bin/time -f "TIME\t%e\tMEM\t%M"  gzip -k -$LEVEL sort_fanalysis_$IN_FILE y ; } 2>>$IN_FILE_SHORT_NAME-sort_fa_gzip_l$LEVEL.txt

{ ls $IN_FILE* -la -ltr | grep \.gz$ |awk '{print $5;}' ; } >> $IN_FILE_SHORT_NAME-gzip_size_l$LEVEL.txt  
{ ls sort_$IN_FILE* -la -ltr | grep \.gz$ |awk '{print $5;}'; } >> $IN_FILE_SHORT_NAME-sort_gzip_size_l$LEVEL.txt  
{ ls sort_$IN_FILE* -la -ltr | grep \.gz$ |awk '{print $5;}'; } >> $IN_FILE_SHORT_NAME-sort_fa_gzip_size_l$LEVEL.txt  

{ /bin/time -f "TIME\t%e\tMEM\t%M" gunzip -c $IN_FILE.gz >sort_$IN_FILE_SHORT_NAME-gz.fasta ; } 2>>$IN_FILE_SHORT_NAME-gunzip_l$LEVEL.txt  
{ /bin/time -f "TIME\t%e\tMEM\t%M" gunzip -c sort_$IN_FILE.gz >sort_$IN_FILE_SHORT_NAME-gz.fasta ; } 2>>$IN_FILE_SHORT_NAME-sort_gunzip_l$LEVEL.txt 
{ /bin/time -f "TIME\t%e\tMEM\t%M" gunzip -c sort_fa_$IN_FILE.gz >sort_$IN_FILE_SHORT_NAME-gz.fasta ; } 2>>$IN_FILE_SHORT_NAME-sort_fa_gunzip_l$LEVEL.txt 

{ ls $IN_FILE_SHORT_NAME* -la -ltr | grep \_gz.fasta$ |awk '{print $5;}' ; } >> $IN_FILE_SHORT_NAME-gunzip_size_l$LEVEL.txt 
{ ls sort_$IN_FILE_SHORT_NAME* -la -ltr | grep \_gz.fasta$ |awk '{print $5;}'; } >> $IN_FILE_SHORT_NAME-sort_gunzip_size_l$LEVEL.txt 
{ ls sort_fanalysis_$IN_FILE_SHORT_NAME* -la -ltr | grep \_gz.fasta$ |awk '{print $5;}'; } >> $IN_FILE_SHORT_NAME-sort_fa_gunzip_size_l$LEVEL.txt 

}

function LZMA_COMPRESSION(){
  IN_FILE="$1";
  LEVEL="$2";

  IN_FILE_SHORT_NAME=$(ls -1 $IN_FILE | sed 's/.fasta//g')
  echo $IN_FILE_SHORT_NAME

{ /bin/time -f "TIME\t%e\tMEM\t%M" lzma -$LEVEL -f -k $IN_FILE ; } 2>> $IN_FILE_SHORT_NAME-lzma_l$LEVEL.txt  
{ /bin/time -f "TIME\t%e\tMEM\t%M" lzma -$LEVEL -f -k sort_$IN_FILE ; } 2>> $IN_FILE_SHORT_NAME-sort_lzma_l$LEVEL.txt  
{ /bin/time -f "TIME\t%e\tMEM\t%M" lzma -$LEVEL -f -k sort_fanalysis_$IN_FILE ; } 2>> $IN_FILE_SHORT_NAME-sort_fa_lzma_l$LEVEL.txt  

{ ls $IN_FILE* -la -ltr | grep \.lzma$ |awk '{print $5;}' ; } >> $IN_FILE_SHORT_NAME-lzma_size_l$LEVEL.txt 
{ ls sort_$IN_FILE* -la -ltr | grep \.lzma$ |awk '{print $5;}'; } >> $IN_FILE_SHORT_NAME-sort_lzma_size_l$LEVEL.txt 
{ ls sort_fanalysis_$IN_FILE* -la -ltr | grep \.lzma$ |awk '{print $5;}'; } >> $IN_FILE_SHORT_NAME-sort_fa_lzma_size_l$LEVEL.txt 

{ /bin/time -f "TIME\t%e\tMEM\t%M" lzma -f -k -d  $IN_FILE.lzma ; } 2>>$IN_FILE_SHORT_NAME-lzma_d_l$LEVEL.txt   
{ /bin/time -f "TIME\t%e\tMEM\t%M" lzma -f -k -d sort_$IN_FILE.lzma ; } 2>>$IN_FILE_SHORT_NAME-sort_lzma_d_l$LEVEL.txt    
{ /bin/time -f "TIME\t%e\tMEM\t%M" lzma -f -k -d sort_fanalysis_$IN_FILE.lzma ; } 2>>$IN_FILE_SHORT_NAME-sort_fa_lzma_d_l$LEVEL.txt   

{ ls $IN_FILE* -la -ltr | grep \.fasta$ |awk '{print $5;}' ; } >> $IN_FILE_SHORT_NAME-lzma_d_size_l$LEVEL.txt
{ ls sort_$IN_FILE* -la -ltr | grep \.fasta$ |awk '{print $5;}'; } >> _$IN_FILE_SHORT_NAME-sort_lzma_d_size_l$LEVEL.txt
{ ls sort_fanalysis_$IN_FILE* -la -ltr | grep \.fasta$ |awk '{print $5;}'; } >> $IN_FILE_SHORT_NAME-sort_fa_lzma_d_size_l$LEVEL.txt
 
}

function BZIP2_COMPRESSION(){
  IN_FILE="$1";
  LEVEL="$2";

  IN_FILE_SHORT_NAME=$(ls -1 $IN_FILE | sed 's/.fasta//g')
  echo $IN_FILE_SHORT_NAME

{ /bin/time -f "TIME\t%e\tMEM\t%M" bzip2 -$LEVEL -f -k $IN_FILE ; } 2>> $IN_FILE_SHORT_NAME-bzip2_l$LEVEL.txt  
{ /bin/time -f "TIME\t%e\tMEM\t%M" bzip2 -$LEVEL -f -k sort_$IN_FILE ; } 2>> $IN_FILE_SHORT_NAME-sort_bzip2_l$LEVEL.txt  
{ /bin/time -f "TIME\t%e\tMEM\t%M" bzip2 -$LEVEL -f -k sort_fanalysis_$IN_FILE ; } 2>> $IN_FILE_SHORT_NAME-sort_fa_bzip2_l$LEVEL.txt  

{ ls $IN_FILE* -la -ltr | grep \.bz2$ |awk '{print $5;}' ; } >> $IN_FILE_SHORT_NAME-bzip2_size_l$LEVEL.txt  
{ ls sort_$IN_FILE* -la -ltr | grep \.bz2$ |awk '{print $5;}'; } >> $IN_FILE_SHORT_NAME-sort_bzip2_size_l$LEVEL.txt  
{ ls sort_fanalysis_$IN_FILE* -la -ltr | grep \.bz2$ |awk '{print $5;}'; } >> $IN_FILE_SHORT_NAME-sort_fa_bzip2_size_l$LEVEL.txt 

{ /bin/time -f "TIME\t%e\tMEM\t%M" bzip2 -f -k -d $IN_FILE.bz2 ; } 2>>$IN_FILE_SHORT_NAME-bzip2_d_l$LEVEL.txt   
{ /bin/time -f "TIME\t%e\tMEM\t%M" bzip2 -f -k -d sort_$IN_FILE.bz2 ; } 2>>$IN_FILE_SHORT_NAME-sort_bzip2_d_l$LEVEL.txt   
{ /bin/time -f "TIME\t%e\tMEM\t%M" bzip2 -f -k -d sort_fanalysis_$IN_FILE.bz2 ; } 2>$IN_FILE_SHORT_NAME-sort_fa_bzip2_d_l$LEVEL.txt  

{ ls $IN_FILE* -la -ltr | grep \.fasta$ |awk '{print $5;}' ; } >>  $IN_FILE_SHORT_NAME-bzip2_d_size_l$LEVEL.txt 
{ ls sort_$IN_FILE* -la -ltr | grep \.fasta$ |awk '{print $5;}'; } >>  $IN_FILE_SHORT_NAME-sort_bzip2_d_size_l$LEVEL.txt 
{ ls sort_fanalysis_$IN_FILE* -la -ltr | grep \.fasta$ |awk '{print $5;}'; } >>  $IN_FILE_SHORT_NAME-sort_fa_bzip2_size_l$LEVEL.txt 

}

function CSV_BUILDER_JARVIS3(){

  IN_FILE="$1";
  LEVEL="$2";
  PARTITION="$3";
  PARTITION_MB="$4";
  SORTING_ALGORITHM="$5";

  IN_FILE_SHORT_NAME=$(ls -1 $IN_FILE | sed 's/.fasta//g')
  echo $IN_FILE_SHORT_NAME

if [[ $SORTING_ALGORITHM == "fasta_analysis" ]]; then  

program="JARVIS3_$INPUT_FILE_SHORT_NAME-fasta_analysis"
level=$LEVEL
partition="$PARTITION"
bytes=$(ls sort_fanalysis_$IN_FILE* -la -ltr | grep \.fasta$ |awk '{print $5;}')
c_bytes=$(awk 'FNR ==3 {print $1}' $IN_FILE_SHORT_NAME-size_$PARTITION_MB-l$LEVEL.txt)
original_c_bytes=$(awk 'FNR ==1 {print $1}' $IN_FILE_SHORT_NAME-size_$PARTITION_MB-l$LEVEL.txt)
bps_original=$(echo "scale=3; ($original_c_bytes * 8) / $bytes" | bc)
bps_final=$(echo "scale=3; ($c_bytes * 8) / $bytes" | bc)
#gain=$(echo "scale=3; ($c_bytes / $original_c_bytes)*100" | bc)
gain=$(echo "scale=3; (1-($c_bytes / $original_c_bytes))*100" | bc)
c_time=$(awk 'FNR ==1 {print $2}' $IN_FILE_SHORT_NAME-sort_fa_$PARTITION_MB_l$LEVEL.txt)
c_mem=$(awk 'FNR ==1 {print $4}'  $IN_FILE_SHORT_NAME-sort_fa_$PARTITION_MB_l$LEVEL.txt)
d_bytes=$(awk 'FNR ==3 {print $1}' $IN_FILE_SHORT_NAME-size_d_$PARTITION_MB_l$LEVEL.txt)
d_time=$(awk 'FNR ==1 {print $2}'  $IN_FILE_SHORT_NAME-sort_fa_d_$PARTITION_MB_l$LEVEL.txt)
d_mem=$(awk 'FNR ==1 {print $4}'  $IN_FILE_SHORT_NAME-sort_fa_d_$PARTITION_MB_l$LEVEL.txt)
diff=0
if [ $bytes -eq $d_bytes ] 
 then
  diff=0
else
  diff=1
fi
run=0

printf $program | tee program_x
printf $bytes | tee bytes_x
printf $level | tee level_x
printf $partition | tee partition_x
printf $c_bytes | tee c_bytes_x
printf $bps_original | tee bps_original_x
printf $bps_final | tee bps_final_x
printf $gain | tee gain_x
printf $c_time | tee c_time_x
printf $c_mem | tee c_mem_x
printf $d_time | tee d_time_x
printf $d_mem | tee d_mem_x
printf $diff | tee diff_x
printf $run | tee run_x
 

file="data_jarvis3.csv"

{
ed -s "$file" <<EOF
1
i
$program,$level,$partition,$bytes,$c_bytes,$bps_original,$bps_final,$gain,$c_time,$c_mem,$d_time,$d_mem,$diff,$run
.
wq
EOF
}

elif [[ $SORTING_ALGORITHM == "sortmf" ]]; then

program="JARVIS3_$IN_FILE_SHORT_NAME-sortmf"
level=$LEVEL
partition="$PARTITION"
bytes=$(ls sort_$IN_FILE* -la -ltr | grep \.fasta$ |awk '{print $5;}')
c_bytes=$(awk 'FNR ==2 {print $1}' $IN_FILE_SHORT_NAME-size_$PARTITION_MB-l$LEVEL.txt)
original_c_bytes=$(awk 'FNR ==1 {print $1}' $IN_FILE_SHORT_NAME-size_$PARTITION_MB-l$LEVEL.txt)
bps_original=$(echo "scale=3; ($original_c_bytes * 8) / $bytes" | bc)
bps_final=$(echo "scale=3; ($c_bytes * 8) / $bytes" | bc)
#gain=$(echo "scale=3; ($c_bytes / $original_c_bytes)*100" | bc)
gain=$(echo "scale=3; (1-($c_bytes / $original_c_bytes))*100" | bc)
c_time=$(awk 'FNR ==1 {print $2}' $IN_FILE_SHORT_NAME-sort_$PARTITION_MB-l$LEVEL.txt)
c_mem=$(awk 'FNR ==1 {print $4}'  $IN_FILE_SHORT_NAME-sort_$PARTITION_MB-l$LEVEL.txt)
d_bytes=$(awk 'FNR ==2 {print $1}' $IN_FILE_SHORT_NAME-size_d_$PARTITION_MB-l$LEVEL.txt)
d_time=$(awk 'FNR ==1 {print $2}'  $IN_FILE_SHORT_NAME-sort_d_$PARTITION_MB-l$LEVEL.txt)
d_mem=$(awk 'FNR ==1 {print $4}'  $IN_FILE_SHORT_NAME-sort_d_$PARTITION_MB-l$LEVEL.txt)
diff=0
if [ $bytes -eq $d_bytes ] 
 then
  diff=0
else
  diff=1
fi
run=0

printf $program | tee program_x
printf $bytes | tee bytes_x
printf $level | tee level_x
printf $partition | tee partition_x
printf $c_bytes | tee c_bytes_x
printf $bps_original | tee bps_original_x
printf $bps_final | tee bps_final_x
printf $gain | tee gain_x
printf $c_time | tee c_time_x
printf $c_mem | tee c_mem_x
printf $d_time | tee d_time_x
printf $d_mem | tee d_mem_x
printf $diff | tee diff_x
printf $run | tee run_x
 

file="data_jarvis3.csv"

{
ed -s "$file" <<EOF
1
i
$program,$level,$partition,$bytes,$c_bytes,$bps_original,$bps_final,$gain,$c_time,$c_mem,$d_time,$d_mem,$diff,$run
.
wq
EOF
}

else

program="JARVIS3_$IN_FILE_SHORT_NAME"
level=$LEVEL
partition="$PARTITION"
bytes=$(ls $IN_FILE* -la -ltr | grep \.fasta$ |awk '{print $5;}')
c_bytes=$(awk 'FNR ==1 {print $1}' $IN_FILE_SHORT_NAME-size_$PARTITION_MB-l$LEVEL.txt)
original_c_bytes=$(awk 'FNR ==1 {print $1}' $IN_FILE_SHORT_NAME-size_$PARTITION_MB-l$LEVEL.txt)
bps_original=$(echo "scale=3; ($original_c_bytes * 8) / $bytes" | bc)
bps_final=$(echo "scale=3; ($c_bytes * 8) / $bytes" | bc)
#gain=$(echo "scale=3; ($c_bytes / $original_c_bytes)*100" | bc)
gain=$(echo "scale=3; (1-($c_bytes / $original_c_bytes))*100" | bc)
c_time=$(awk 'FNR ==1 {print $2}' $IN_FILE_SHORT_NAME-$PARTITION_MB-l$LEVEL.txt)
c_mem=$(awk 'FNR ==1 {print $4}'  $IN_FILE_SHORT_NAME-$PARTITION_MB-l$LEVEL.txt)
d_bytes=$(awk 'FNR ==1 {print $1}' $IN_FILE_SHORT_NAME-size_d_$PARTITION_MB-l$LEVEL.txt)
d_time=$(awk 'FNR ==1 {print $2}'  $IN_FILE_SHORT_NAME-d_$PARTITION_MB-l$LEVEL.txt)
d_mem=$(awk 'FNR ==1 {print $4}'  $IN_FILE_SHORT_NAME-d_$PARTITION_MB-l$LEVEL.txt)
diff=0
if [ $bytes -eq $d_bytes ] 
 then
  diff=0
else
  diff=1
fi
run=0

printf $program | tee program_x
printf $bytes | tee bytes_x
printf $level | tee level_x
printf $partition | tee partition_x
printf $c_bytes | tee c_bytes_x
printf $bps_original | tee bps_original_x
printf $bps_final | tee bps_final_x
printf $gain | tee gain_x
printf $c_time | tee c_time_x
printf $c_mem | tee c_mem_x
printf $d_time | tee d_time_x
printf $d_mem | tee d_mem_x
printf $diff | tee diff_x
printf $run | tee run_x
 

file="data_jarvis3.csv"

{
ed -s "$file" <<EOF
1
i
$program,$level,$partition,$bytes,$c_bytes,$bps_original,$bps_final,$gain,$c_time,$c_mem,$d_time,$d_mem,$diff,$run
.
wq
EOF
}

fi

}


function CSV_BUILDER_NAF(){

IN_FILE="$1";
LEVEL="$2";
SORTING_ALGORITHM="$3";
  # $IN_FILE_SHORT_NAME-naf_l$LEVEL.txt
  # $IN_FILE_SHORT_NAME-naf_size_l$LEVEL.txt


if [[ $SORTING_ALGORITHM == "fasta_analysis" ]]; then  

program="NAF_$IN_FILE_SHORT_NAME-fasta_analysis"
level=$LEVEL
bytes=$(ls sort_fanalysis_$IN_FILE* -la -ltr | grep \.fasta$ |awk '{print $5;}')
c_bytes=$(awk 'FNR ==3 {print $1}' $IN_FILE_SHORT_NAME-sort_fa_size_naf-l$LEVEL.txt)
original_c_bytes=$(awk 'FNR ==1 {print $1}' $IN_FILE_SHORT_NAME-sort_fa_size_naf-l$LEVEL.txt)
bps_original=$(echo "scale=3; ($original_c_bytes * 8) / $bytes" | bc)
bps_final=$(echo "scale=3; ($c_bytes * 8) / $bytes" | bc)
#gain=$(echo "scale=3; ($c_bytes / $original_c_bytes)*100" | bc)
gain=$(echo "scale=3; (1-($c_bytes / $original_c_bytes))*100" | bc)
c_time=$(awk 'FNR ==1 {print $2}' $IN_FILE_SHORT_NAME-sort_fa_naf-l$LEVEL.txt)
c_mem=$(awk 'FNR ==1 {print $4}'  $IN_FILE_SHORT_NAME-sort_fa_naf-l$LEVEL.txt)
d_bytes=$(awk 'FNR ==3 {print $1}' $IN_FILE_SHORT_NAME-sort_fa_size_unnaf-l$LEVEL.txt)
d_time=$(awk 'FNR ==1 {print $2}'  $IN_FILE_SHORT_NAME-sort_fa_unnaf-l$LEVEL.txt)
d_mem=$(awk 'FNR ==1 {print $4}'  $IN_FILE_SHORT_NAME-sort_fa_unnaf-l$LEVEL.txt)
diff=0
if [ $bytes -eq $d_bytes ] 
 then
  diff=0
else
  diff=1
fi
run=0

printf $program | tee program_x
printf $bytes | tee bytes_x
printf $level | tee level_x
printf $c_bytes | tee c_bytes_x
printf $bps_original | tee bps_original_x
printf $bps_final | tee bps_final_x
printf $gain | tee gain_x
printf $c_time | tee c_time_x
printf $c_mem | tee c_mem_x
printf $d_time | tee d_time_x
printf $d_mem | tee d_mem_x
printf $diff | tee diff_x
printf $run | tee run_x
 

file="data_naf.csv"

{
ed -s "$file" <<EOF
1
i
$program,$level,$bytes,$c_bytes,$bps_original,$bps_final,$gain,$c_time,$c_mem,$d_time,$d_mem,$diff,$run
.
wq
EOF
}


elif [[ $SORTING_ALGORITHM == "sortmf" ]]; then  

program="NAF_$IN_FILE_SHORT_NAME-sortmf"
level=$LEVEL
bytes=$(ls sort_$IN_FILE* -la -ltr | grep \.fasta$ |awk '{print $5;}')
c_bytes=$(awk 'FNR ==2 {print $1}' $IN_FILE_SHORT_NAME-sort_size_naf-l$LEVEL.txt)
original_c_bytes=$(awk 'FNR ==1 {print $1}' $IN_FILE_SHORT_NAME-sort_size_naf-l$LEVEL.txt)
bps_original=$(echo "scale=3; ($original_c_bytes * 8) / $bytes" | bc)
bps_final=$(echo "scale=3; ($c_bytes * 8) / $bytes" | bc)
#gain=$(echo "scale=3; ($c_bytes / $original_c_bytes)*100" | bc)
gain=$(echo "scale=3; (1-($c_bytes / $original_c_bytes))*100" | bc)
c_time=$(awk 'FNR ==1 {print $2}' $IN_FILE_SHORT_NAME-sort_naf-l$LEVEL.txt)
c_mem=$(awk 'FNR ==1 {print $4}'  $IN_FILE_SHORT_NAME-sort_naf-l$LEVEL.txt)
d_bytes=$(awk 'FNR ==2 {print $1}' $IN_FILE_SHORT_NAME-sort_size_unnaf-l$LEVEL.txt)
d_time=$(awk 'FNR ==1 {print $2}'  $IN_FILE_SHORT_NAME-sort_unnaf-l$LEVEL.txt)
d_mem=$(awk 'FNR ==1 {print $4}'  $IN_FILE_SHORT_NAME-sort_unnaf-l$LEVEL.txt)
diff=0
if [ $bytes -eq $d_bytes ] 
 then
  diff=0
else
  diff=1
fi
run=0

printf $program | tee program_x
printf $bytes | tee bytes_x
printf $level | tee level_x
printf $c_bytes | tee c_bytes_x
printf $bps_original | tee bps_original_x
printf $bps_final | tee bps_final_x
printf $gain | tee gain_x
printf $c_time | tee c_time_x
printf $c_mem | tee c_mem_x
printf $d_time | tee d_time_x
printf $d_mem | tee d_mem_x
printf $diff | tee diff_x
printf $run | tee run_x
 

file="data_naf.csv"

{
ed -s "$file" <<EOF
1
i
$program,$level,$bytes,$c_bytes,$bps_original,$bps_final,$gain,$c_time,$c_mem,$d_time,$d_mem,$diff,$run
.
wq
EOF
}

else

program="NAF_$IN_FILE_SHORT_NAME"
level=$LEVEL
bytes=$(ls $IN_FILE* -la -ltr | grep \.fasta$ |awk '{print $5;}')
c_bytes=$(awk 'FNR ==1 {print $1}' $IN_FILE_SHORT_NAME-size_naf-l$LEVEL.txt)
original_c_bytes=$(awk 'FNR ==1 {print $1}' $IN_FILE_SHORT_NAME-size_naf-l$LEVEL.txt)
bps_original=$(echo "scale=3; ($original_c_bytes * 8) / $bytes" | bc)
bps_final=$(echo "scale=3; ($c_bytes * 8) / $bytes" | bc)
#gain=$(echo "scale=3; ($c_bytes / $original_c_bytes)*100" | bc)
gain=$(echo "scale=3; (1-($c_bytes / $original_c_bytes))*100" | bc)
c_time=$(awk 'FNR ==1 {print $2}' $IN_FILE_SHORT_NAME-naf-l$LEVEL.txt)
c_mem=$(awk 'FNR ==1 {print $4}'  $IN_FILE_SHORT_NAME-naf-l$LEVEL.txt)
d_bytes=$(awk 'FNR ==1 {print $1}' $IN_FILE_SHORT_NAME-size_unnaf-l$LEVEL.txt)
d_time=$(awk 'FNR ==1 {print $2}'  $IN_FILE_SHORT_NAME-unnaf-l$LEVEL.txt)
d_mem=$(awk 'FNR ==1 {print $4}'  $IN_FILE_SHORT_NAME-unnaf-l$LEVEL.txt)
diff=0
if [ $bytes -eq $d_bytes ] 
 then
  diff=0
else
  diff=1
fi
run=0

printf $program | tee program_x
printf $bytes | tee bytes_x
printf $level | tee level_x
printf $c_bytes | tee c_bytes_x
printf $bps_original | tee bps_original_x
printf $bps_final | tee bps_final_x
printf $gain | tee gain_x
printf $c_time | tee c_time_x
printf $c_mem | tee c_mem_x
printf $d_time | tee d_time_x
printf $d_mem | tee d_mem_x
printf $diff | tee diff_x
printf $run | tee run_x
 

file="data_naf.csv"

{
ed -s "$file" <<EOF
1
i
$program,$level,$bytes,$c_bytes,$bps_original,$bps_final,$gain,$c_time,$c_mem,$d_time,$d_mem,$diff,$run
.
wq
EOF
}

fi

}

function CSV_BUILDER_MBGC(){

IN_FILE="$1";
LEVEL="$2";
SORTING_ALGORITHM="$3";
  # $IN_FILE_SHORT_NAME-naf_l$LEVEL.txt
  # $IN_FILE_SHORT_NAME-naf_size_l$LEVEL.txt


if [[ $SORTING_ALGORITHM == "fasta_analysis" ]]; then  

program="MBGC_$IN_FILE_SHORT_NAME-fasta_analysis"
level=$LEVEL
bytes=$(ls sort_fanalysis_$IN_FILE* -la -ltr | grep \.fasta$ |awk '{print $5;}')
c_bytes=$(awk 'FNR ==3 {print $1}' $IN_FILE_SHORT_NAME-sort_fa_size_mbgc-l$LEVEL.txt)
original_c_bytes=$(awk 'FNR ==1 {print $1}' $IN_FILE_SHORT_NAME-sort_fa_size_mbgc-l$LEVEL.txt)
bps_original=$(echo "scale=3; ($original_c_bytes * 8) / $bytes" | bc)
bps_final=$(echo "scale=3; ($c_bytes * 8) / $bytes" | bc)
#gain=$(echo "scale=3; ($c_bytes / $original_c_bytes)*100" | bc)
gain=$(echo "scale=3; (1-($c_bytes / $original_c_bytes))*100" | bc)
c_time=$(awk 'FNR ==1 {print $2}' $IN_FILE_SHORT_NAME-sort_fa_mbgc-l$LEVEL.txt)
c_mem=$(awk 'FNR ==1 {print $4}'  $IN_FILE_SHORT_NAME-sort_fa_mbgc-l$LEVEL.txt)
d_bytes=$(awk 'FNR ==3 {print $1}' $IN_FILE_SHORT_NAME-sort_fa_size_d_mbgc-l$LEVEL.txt)
d_time=$(awk 'FNR ==1 {print $2}'  $IN_FILE_SHORT_NAME-sort_fa_d_mbgc-l$LEVEL.txt)
d_mem=$(awk 'FNR ==1 {print $4}'  $IN_FILE_SHORT_NAME-sort_fa_d_mbgc-l$LEVEL.txt)
diff=0
if [ $bytes -eq $d_bytes ] 
 then
  diff=0
else
  diff=1
fi
run=0

printf $program | tee program_x
printf $bytes | tee bytes_x
printf $level | tee level_x
printf $c_bytes | tee c_bytes_x
printf $bps_original | tee bps_original_x
printf $bps_final | tee bps_final_x
printf $gain | tee gain_x
printf $c_time | tee c_time_x
printf $c_mem | tee c_mem_x
printf $d_time | tee d_time_x
printf $d_mem | tee d_mem_x
printf $diff | tee diff_x
printf $run | tee run_x
 

file="data_mbgc.csv"

{
ed -s "$file" <<EOF
1
i
$program,$level,$bytes,$c_bytes,$bps_original,$bps_final,$gain,$c_time,$c_mem,$d_time,$d_mem,$diff,$run
.
wq
EOF
}


elif [[ $SORTING_ALGORITHM == "sortmf" ]]; then  

program="MBGC_$IN_FILE_SHORT_NAME-sortmf"
level=$LEVEL
bytes=$(ls sort_$IN_FILE* -la -ltr | grep \.fasta$ |awk '{print $5;}')
c_bytes=$(awk 'FNR ==2 {print $1}' $IN_FILE_SHORT_NAME-sort_size_mbgc-l$LEVEL.txt)
original_c_bytes=$(awk 'FNR ==1 {print $1}' $IN_FILE_SHORT_NAME-sort_size_mbgc-l$LEVEL.txt)
bps_original=$(echo "scale=3; ($original_c_bytes * 8) / $bytes" | bc)
bps_final=$(echo "scale=3; ($c_bytes * 8) / $bytes" | bc)
#gain=$(echo "scale=3; ($c_bytes / $original_c_bytes)*100" | bc)
gain=$(echo "scale=3; (1-($c_bytes / $original_c_bytes))*100" | bc)
c_time=$(awk 'FNR ==1 {print $2}' $IN_FILE_SHORT_NAME-sort_mbgc-l$LEVEL.txt)
c_mem=$(awk 'FNR ==1 {print $4}'  $IN_FILE_SHORT_NAME-sort_mbgc-l$LEVEL.txt)
d_bytes=$(awk 'FNR ==2 {print $1}' $IN_FILE_SHORT_NAME-sort_size_d_mbgc-l$LEVEL.txt)
d_time=$(awk 'FNR ==1 {print $2}'  $IN_FILE_SHORT_NAME-sort_d_mbgc-l$LEVEL.txt)
d_mem=$(awk 'FNR ==1 {print $4}'  $IN_FILE_SHORT_NAME-sort_d_mbgc-l$LEVEL.txt)
diff=0
if [ $bytes -eq $d_bytes ] 
 then
  diff=0
else
  diff=1
fi
run=0

printf $program | tee program_x
printf $bytes | tee bytes_x
printf $level | tee level_x
printf $c_bytes | tee c_bytes_x
printf $bps_original | tee bps_original_x
printf $bps_final | tee bps_final_x
printf $gain | tee gain_x
printf $c_time | tee c_time_x
printf $c_mem | tee c_mem_x
printf $d_time | tee d_time_x
printf $d_mem | tee d_mem_x
printf $diff | tee diff_x
printf $run | tee run_x
 

file="data_mbgc.csv"

{
ed -s "$file" <<EOF
1
i
$program,$level,$bytes,$c_bytes,$bps_original,$bps_final,$gain,$c_time,$c_mem,$d_time,$d_mem,$diff,$run
.
wq
EOF
}

else

program="MBGC_$IN_FILE_SHORT_NAME-sortmf"
level=$LEVEL
bytes=$(ls $IN_FILE* -la -ltr | grep \.fasta$ |awk '{print $5;}')
c_bytes=$(awk 'FNR ==1 {print $1}' $IN_FILE_SHORT_NAME-size_mbgc-l$LEVEL.txt)
original_c_bytes=$(awk 'FNR ==1 {print $1}' $IN_FILE_SHORT_NAME-size_mbgc-l$LEVEL.txt)
bps_original=$(echo "scale=3; ($original_c_bytes * 8) / $bytes" | bc)
bps_final=$(echo "scale=3; ($c_bytes * 8) / $bytes" | bc)
#gain=$(echo "scale=3; ($c_bytes / $original_c_bytes)*100" | bc)
gain=$(echo "scale=3; (1-($c_bytes / $original_c_bytes))*100" | bc)
c_time=$(awk 'FNR ==1 {print $2}' $IN_FILE_SHORT_NAME-mbgc-l$LEVEL.txt)
c_mem=$(awk 'FNR ==1 {print $4}'  $IN_FILE_SHORT_NAME-mbgc-l$LEVEL.txt)
d_bytes=$(awk 'FNR ==1 {print $1}' $IN_FILE_SHORT_NAME-size_d_mbgc-l$LEVEL.txt)
d_time=$(awk 'FNR ==1 {print $2}'  $IN_FILE_SHORT_NAME-d_mbgc-l$LEVEL.txt)
d_mem=$(awk 'FNR ==1 {print $4}'  $IN_FILE_SHORT_NAME-d_mbgc-l$LEVEL.txt)
diff=0
if [ $bytes -eq $d_bytes ] 
 then
  diff=0
else
  diff=1
fi
run=0

printf $program | tee program_x
printf $bytes | tee bytes_x
printf $level | tee level_x
printf $c_bytes | tee c_bytes_x
printf $bps_original | tee bps_original_x
printf $bps_final | tee bps_final_x
printf $gain | tee gain_x
printf $c_time | tee c_time_x
printf $c_mem | tee c_mem_x
printf $d_time | tee d_time_x
printf $d_mem | tee d_mem_x
printf $diff | tee diff_x
printf $run | tee run_x
 

file="data_mbgc.csv"

{
ed -s "$file" <<EOF
1
i
$program,$level,$bytes,$c_bytes,$bps_original,$bps_final,$gain,$c_time,$c_mem,$d_time,$d_mem,$diff,$run
.
wq
EOF
}

fi

}

function CSV_BUILDER_MFCOMPRESS(){

}

function CSV_BUILDER_GZIP(){

IN_FILE="$1";
LEVEL="$2";
SORTING_ALGORITHM="$3";
  # $IN_FILE_SHORT_NAME-naf_l$LEVEL.txt
  # $IN_FILE_SHORT_NAME-naf_size_l$LEVEL.txt


if [[ $SORTING_ALGORITHM == "fasta_analysis" ]]; then  

program="GZIP_$IN_FILE_SHORT_NAME-fasta_analysis"
level=$LEVEL
bytes=$(ls sort_fanalysis_$IN_FILE* -la -ltr | grep \.fasta$ |awk '{print $5;}')
c_bytes=$(awk 'FNR ==3 {print $1}' $IN_FILE_SHORT_NAME-sort_fa_size_gzip-l$LEVEL.txt)
original_c_bytes=$(awk 'FNR ==1 {print $1}' $IN_FILE_SHORT_NAME-sort_fa_size_gzip-l$LEVEL.txt)
bps_original=$(echo "scale=3; ($original_c_bytes * 8) / $bytes" | bc)
bps_final=$(echo "scale=3; ($c_bytes * 8) / $bytes" | bc)
#gain=$(echo "scale=3; ($c_bytes / $original_c_bytes)*100" | bc)
gain=$(echo "scale=3; (1-($c_bytes / $original_c_bytes))*100" | bc)
c_time=$(awk 'FNR ==1 {print $2}' $IN_FILE_SHORT_NAME-sort_fa_gzip-l$LEVEL.txt)
c_mem=$(awk 'FNR ==1 {print $4}'  $IN_FILE_SHORT_NAME-sort_fa_gzip-l$LEVEL.txt)
d_bytes=$(awk 'FNR ==3 {print $1}' $IN_FILE_SHORT_NAME-sort_fa_size_d_gzip-l$LEVEL.txt)
d_time=$(awk 'FNR ==1 {print $2}'  $IN_FILE_SHORT_NAME-sort_fa_d_gzip-l$LEVEL.txt)
d_mem=$(awk 'FNR ==1 {print $4}'  $IN_FILE_SHORT_NAME-sort_fa_d_gzip-l$LEVEL.txt)
diff=0
if [ $bytes -eq $d_bytes ] 
 then
  diff=0
else
  diff=1
fi
run=0

printf $program | tee program_x
printf $bytes | tee bytes_x
printf $level | tee level_x
printf $c_bytes | tee c_bytes_x
printf $bps_original | tee bps_original_x
printf $bps_final | tee bps_final_x
printf $gain | tee gain_x
printf $c_time | tee c_time_x
printf $c_mem | tee c_mem_x
printf $d_time | tee d_time_x
printf $d_mem | tee d_mem_x
printf $diff | tee diff_x
printf $run | tee run_x
 

file="data_gzip.csv"

{
ed -s "$file" <<EOF
1
i
$program,$level,$bytes,$c_bytes,$bps_original,$bps_final,$gain,$c_time,$c_mem,$d_time,$d_mem,$diff,$run
.
wq
EOF
}


elif [[ $SORTING_ALGORITHM == "sortmf" ]]; then  

program="gzip_$IN_FILE_SHORT_NAME-sortmf"
level=$LEVEL
bytes=$(ls sort_$IN_FILE* -la -ltr | grep \.fasta$ |awk '{print $5;}')
c_bytes=$(awk 'FNR ==2 {print $1}' $IN_FILE_SHORT_NAME-sort_size_gzip-l$LEVEL.txt)
original_c_bytes=$(awk 'FNR ==1 {print $1}' $IN_FILE_SHORT_NAME-sort_size_gzip-l$LEVEL.txt)
bps_original=$(echo "scale=3; ($original_c_bytes * 8) / $bytes" | bc)
bps_final=$(echo "scale=3; ($c_bytes * 8) / $bytes" | bc)
#gain=$(echo "scale=3; ($c_bytes / $original_c_bytes)*100" | bc)
gain=$(echo "scale=3; (1-($c_bytes / $original_c_bytes))*100" | bc)
c_time=$(awk 'FNR ==1 {print $2}' $IN_FILE_SHORT_NAME-sort_gzip-l$LEVEL.txt)
c_mem=$(awk 'FNR ==1 {print $4}'  $IN_FILE_SHORT_NAME-sort_gzip-l$LEVEL.txt)
d_bytes=$(awk 'FNR ==2 {print $1}' $IN_FILE_SHORT_NAME-sort_size_d_gzip-l$LEVEL.txt)
d_time=$(awk 'FNR ==1 {print $2}'  $IN_FILE_SHORT_NAME-sort_d_gzip-l$LEVEL.txt)
d_mem=$(awk 'FNR ==1 {print $4}'  $IN_FILE_SHORT_NAME-sort_d_gzip-l$LEVEL.txt)
diff=0
if [ $bytes -eq $d_bytes ] 
 then
  diff=0
else
  diff=1
fi
run=0

printf $program | tee program_x
printf $bytes | tee bytes_x
printf $level | tee level_x
printf $c_bytes | tee c_bytes_x
printf $bps_original | tee bps_original_x
printf $bps_final | tee bps_final_x
printf $gain | tee gain_x
printf $c_time | tee c_time_x
printf $c_mem | tee c_mem_x
printf $d_time | tee d_time_x
printf $d_mem | tee d_mem_x
printf $diff | tee diff_x
printf $run | tee run_x
 

file="data_gzip.csv"

{
ed -s "$file" <<EOF
1
i
$program,$level,$bytes,$c_bytes,$bps_original,$bps_final,$gain,$c_time,$c_mem,$d_time,$d_mem,$diff,$run
.
wq
EOF
}

else

program="gzip_$IN_FILE_SHORT_NAME-sortmf"
level=$LEVEL
bytes=$(ls $IN_FILE* -la -ltr | grep \.fasta$ |awk '{print $5;}')
c_bytes=$(awk 'FNR ==1 {print $1}' $IN_FILE_SHORT_NAME-size_gzip-l$LEVEL.txt)
original_c_bytes=$(awk 'FNR ==1 {print $1}' $IN_FILE_SHORT_NAME-size_gzip-l$LEVEL.txt)
bps_original=$(echo "scale=3; ($original_c_bytes * 8) / $bytes" | bc)
bps_final=$(echo "scale=3; ($c_bytes * 8) / $bytes" | bc)
#gain=$(echo "scale=3; ($c_bytes / $original_c_bytes)*100" | bc)
gain=$(echo "scale=3; (1-($c_bytes / $original_c_bytes))*100" | bc)
c_time=$(awk 'FNR ==1 {print $2}' $IN_FILE_SHORT_NAME-gzip-l$LEVEL.txt)
c_mem=$(awk 'FNR ==1 {print $4}'  $IN_FILE_SHORT_NAME-gzip-l$LEVEL.txt)
d_bytes=$(awk 'FNR ==1 {print $1}' $IN_FILE_SHORT_NAME-size_d_gzip-l$LEVEL.txt)
d_time=$(awk 'FNR ==1 {print $2}'  $IN_FILE_SHORT_NAME-d_gzip-l$LEVEL.txt)
d_mem=$(awk 'FNR ==1 {print $4}'  $IN_FILE_SHORT_NAME-d_gzip-l$LEVEL.txt)
diff=0
if [ $bytes -eq $d_bytes ] 
 then
  diff=0
else
  diff=1
fi
run=0

printf $program | tee program_x
printf $bytes | tee bytes_x
printf $level | tee level_x
printf $c_bytes | tee c_bytes_x
printf $bps_original | tee bps_original_x
printf $bps_final | tee bps_final_x
printf $gain | tee gain_x
printf $c_time | tee c_time_x
printf $c_mem | tee c_mem_x
printf $d_time | tee d_time_x
printf $d_mem | tee d_mem_x
printf $diff | tee diff_x
printf $run | tee run_x
 

file="data_gzip.csv"

{
ed -s "$file" <<EOF
1
i
$program,$level,$bytes,$c_bytes,$bps_original,$bps_final,$gain,$c_time,$c_mem,$d_time,$d_mem,$diff,$run
.
wq
EOF
}

fi



}

function CSV_BUILDER_LZMA(){

  IN_FILE="$1";
LEVEL="$2";
SORTING_ALGORITHM="$3";
  # $IN_FILE_SHORT_NAME-naf_l$LEVEL.txt
  # $IN_FILE_SHORT_NAME-naf_size_l$LEVEL.txt


if [[ $SORTING_ALGORITHM == "fasta_analysis" ]]; then  

program="lzma_$IN_FILE_SHORT_NAME-fasta_analysis"
level=$LEVEL
bytes=$(ls sort_fanalysis_$IN_FILE* -la -ltr | grep \.fasta$ |awk '{print $5;}')
c_bytes=$(awk 'FNR ==3 {print $1}' $IN_FILE_SHORT_NAME-sort_fa_size_lzma-l$LEVEL.txt)
original_c_bytes=$(awk 'FNR ==1 {print $1}' $IN_FILE_SHORT_NAME-sort_fa_size_lzma-l$LEVEL.txt)
bps_original=$(echo "scale=3; ($original_c_bytes * 8) / $bytes" | bc)
bps_final=$(echo "scale=3; ($c_bytes * 8) / $bytes" | bc)
#gain=$(echo "scale=3; ($c_bytes / $original_c_bytes)*100" | bc)
gain=$(echo "scale=3; (1-($c_bytes / $original_c_bytes))*100" | bc)
c_time=$(awk 'FNR ==1 {print $2}' $IN_FILE_SHORT_NAME-sort_fa_lzma-l$LEVEL.txt)
c_mem=$(awk 'FNR ==1 {print $4}'  $IN_FILE_SHORT_NAME-sort_fa_lzma-l$LEVEL.txt)
d_bytes=$(awk 'FNR ==3 {print $1}' $IN_FILE_SHORT_NAME-sort_fa_size_d_lzma-l$LEVEL.txt)
d_time=$(awk 'FNR ==1 {print $2}'  $IN_FILE_SHORT_NAME-sort_fa_d_lzma-l$LEVEL.txt)
d_mem=$(awk 'FNR ==1 {print $4}'  $IN_FILE_SHORT_NAME-sort_fa_d_lzma-l$LEVEL.txt)
diff=0
if [ $bytes -eq $d_bytes ] 
 then
  diff=0
else
  diff=1
fi
run=0

printf $program | tee program_x
printf $bytes | tee bytes_x
printf $level | tee level_x
printf $c_bytes | tee c_bytes_x
printf $bps_original | tee bps_original_x
printf $bps_final | tee bps_final_x
printf $gain | tee gain_x
printf $c_time | tee c_time_x
printf $c_mem | tee c_mem_x
printf $d_time | tee d_time_x
printf $d_mem | tee d_mem_x
printf $diff | tee diff_x
printf $run | tee run_x
 

file="data_lzma.csv"

{
ed -s "$file" <<EOF
1
i
$program,$level,$bytes,$c_bytes,$bps_original,$bps_final,$gain,$c_time,$c_mem,$d_time,$d_mem,$diff,$run
.
wq
EOF
}


elif [[ $SORTING_ALGORITHM == "sortmf" ]]; then  

program="MBGC_$IN_FILE_SHORT_NAME-sortmf"
level=$LEVEL
bytes=$(ls sort_$IN_FILE* -la -ltr | grep \.fasta$ |awk '{print $5;}')
c_bytes=$(awk 'FNR ==2 {print $1}' $IN_FILE_SHORT_NAME-sort_size_lzma-l$LEVEL.txt)
original_c_bytes=$(awk 'FNR ==1 {print $1}' $IN_FILE_SHORT_NAME-sort_size_lzma-l$LEVEL.txt)
bps_original=$(echo "scale=3; ($original_c_bytes * 8) / $bytes" | bc)
bps_final=$(echo "scale=3; ($c_bytes * 8) / $bytes" | bc)
#gain=$(echo "scale=3; ($c_bytes / $original_c_bytes)*100" | bc)
gain=$(echo "scale=3; (1-($c_bytes / $original_c_bytes))*100" | bc)
c_time=$(awk 'FNR ==1 {print $2}' $IN_FILE_SHORT_NAME-sort_lzma-l$LEVEL.txt)
c_mem=$(awk 'FNR ==1 {print $4}'  $IN_FILE_SHORT_NAME-sort_lzma-l$LEVEL.txt)
d_bytes=$(awk 'FNR ==2 {print $1}' $IN_FILE_SHORT_NAME-sort_size_d_lzma-l$LEVEL.txt)
d_time=$(awk 'FNR ==1 {print $2}'  $IN_FILE_SHORT_NAME-sort_d_lzma-l$LEVEL.txt)
d_mem=$(awk 'FNR ==1 {print $4}'  $IN_FILE_SHORT_NAME-sort_d_lzma-l$LEVEL.txt)
diff=0
if [ $bytes -eq $d_bytes ] 
 then
  diff=0
else
  diff=1
fi
run=0

printf $program | tee program_x
printf $bytes | tee bytes_x
printf $level | tee level_x
printf $c_bytes | tee c_bytes_x
printf $bps_original | tee bps_original_x
printf $bps_final | tee bps_final_x
printf $gain | tee gain_x
printf $c_time | tee c_time_x
printf $c_mem | tee c_mem_x
printf $d_time | tee d_time_x
printf $d_mem | tee d_mem_x
printf $diff | tee diff_x
printf $run | tee run_x
 

file="data_lzma.csv"

{
ed -s "$file" <<EOF
1
i
$program,$level,$bytes,$c_bytes,$bps_original,$bps_final,$gain,$c_time,$c_mem,$d_time,$d_mem,$diff,$run
.
wq
EOF
}

else

program="lzma_$IN_FILE_SHORT_NAME-sortmf"
level=$LEVEL
bytes=$(ls $IN_FILE* -la -ltr | grep \.fasta$ |awk '{print $5;}')
c_bytes=$(awk 'FNR ==1 {print $1}' $IN_FILE_SHORT_NAME-size_lzma-l$LEVEL.txt)
original_c_bytes=$(awk 'FNR ==1 {print $1}' $IN_FILE_SHORT_NAME-size_lzma-l$LEVEL.txt)
bps_original=$(echo "scale=3; ($original_c_bytes * 8) / $bytes" | bc)
bps_final=$(echo "scale=3; ($c_bytes * 8) / $bytes" | bc)
#gain=$(echo "scale=3; ($c_bytes / $original_c_bytes)*100" | bc)
gain=$(echo "scale=3; (1-($c_bytes / $original_c_bytes))*100" | bc)
c_time=$(awk 'FNR ==1 {print $2}' $IN_FILE_SHORT_NAME-lzma-l$LEVEL.txt)
c_mem=$(awk 'FNR ==1 {print $4}'  $IN_FILE_SHORT_NAME-lzma-l$LEVEL.txt)
d_bytes=$(awk 'FNR ==1 {print $1}' $IN_FILE_SHORT_NAME-size_d_lzma-l$LEVEL.txt)
d_time=$(awk 'FNR ==1 {print $2}'  $IN_FILE_SHORT_NAME-d_lzma-l$LEVEL.txt)
d_mem=$(awk 'FNR ==1 {print $4}'  $IN_FILE_SHORT_NAME-d_lzma-l$LEVEL.txt)
diff=0
if [ $bytes -eq $d_bytes ] 
 then
  diff=0
else
  diff=1
fi
run=0

printf $program | tee program_x
printf $bytes | tee bytes_x
printf $level | tee level_x
printf $c_bytes | tee c_bytes_x
printf $bps_original | tee bps_original_x
printf $bps_final | tee bps_final_x
printf $gain | tee gain_x
printf $c_time | tee c_time_x
printf $c_mem | tee c_mem_x
printf $d_time | tee d_time_x
printf $d_mem | tee d_mem_x
printf $diff | tee diff_x
printf $run | tee run_x
 

file="data_lzma.csv"

{
ed -s "$file" <<EOF
1
i
$program,$level,$bytes,$c_bytes,$bps_original,$bps_final,$gain,$c_time,$c_mem,$d_time,$d_mem,$diff,$run
.
wq
EOF
}

fi


}

function CSV_BUILDER_BZIP2(){

  IN_FILE="$1";
LEVEL="$2";
SORTING_ALGORITHM="$3";
  # $IN_FILE_SHORT_NAME-naf_l$LEVEL.txt
  # $IN_FILE_SHORT_NAME-naf_size_l$LEVEL.txt


if [[ $SORTING_ALGORITHM == "fasta_analysis" ]]; then  

program="bzip2_$IN_FILE_SHORT_NAME-fasta_analysis"
level=$LEVEL
bytes=$(ls sort_fanalysis_$IN_FILE* -la -ltr | grep \.fasta$ |awk '{print $5;}')
c_bytes=$(awk 'FNR ==3 {print $1}' $IN_FILE_SHORT_NAME-sort_fa_size_bzip2-l$LEVEL.txt)
original_c_bytes=$(awk 'FNR ==1 {print $1}' $IN_FILE_SHORT_NAME-sort_fa_size_bzip2-l$LEVEL.txt)
bps_original=$(echo "scale=3; ($original_c_bytes * 8) / $bytes" | bc)
bps_final=$(echo "scale=3; ($c_bytes * 8) / $bytes" | bc)
#gain=$(echo "scale=3; ($c_bytes / $original_c_bytes)*100" | bc)
gain=$(echo "scale=3; (1-($c_bytes / $original_c_bytes))*100" | bc)
c_time=$(awk 'FNR ==1 {print $2}' $IN_FILE_SHORT_NAME-sort_fa_bzip2-l$LEVEL.txt)
c_mem=$(awk 'FNR ==1 {print $4}'  $IN_FILE_SHORT_NAME-sort_fa_bzip2-l$LEVEL.txt)
d_bytes=$(awk 'FNR ==3 {print $1}' $IN_FILE_SHORT_NAME-sort_fa_size_d_bzip2-l$LEVEL.txt)
d_time=$(awk 'FNR ==1 {print $2}'  $IN_FILE_SHORT_NAME-sort_fa_d_bzip2-l$LEVEL.txt)
d_mem=$(awk 'FNR ==1 {print $4}'  $IN_FILE_SHORT_NAME-sort_fa_d_bzip2-l$LEVEL.txt)
diff=0
if [ $bytes -eq $d_bytes ] 
 then
  diff=0
else
  diff=1
fi
run=0

printf $program | tee program_x
printf $bytes | tee bytes_x
printf $level | tee level_x
printf $c_bytes | tee c_bytes_x
printf $bps_original | tee bps_original_x
printf $bps_final | tee bps_final_x
printf $gain | tee gain_x
printf $c_time | tee c_time_x
printf $c_mem | tee c_mem_x
printf $d_time | tee d_time_x
printf $d_mem | tee d_mem_x
printf $diff | tee diff_x
printf $run | tee run_x
 

file="data_bzip2.csv"

{
ed -s "$file" <<EOF
1
i
$program,$level,$bytes,$c_bytes,$bps_original,$bps_final,$gain,$c_time,$c_mem,$d_time,$d_mem,$diff,$run
.
wq
EOF
}


elif [[ $SORTING_ALGORITHM == "sortmf" ]]; then  

program="MBGC_$IN_FILE_SHORT_NAME-sortmf"
level=$LEVEL
bytes=$(ls sort_$IN_FILE* -la -ltr | grep \.fasta$ |awk '{print $5;}')
c_bytes=$(awk 'FNR ==2 {print $1}' $IN_FILE_SHORT_NAME-sort_size_bzip2-l$LEVEL.txt)
original_c_bytes=$(awk 'FNR ==1 {print $1}' $IN_FILE_SHORT_NAME-sort_size_bzip2-l$LEVEL.txt)
bps_original=$(echo "scale=3; ($original_c_bytes * 8) / $bytes" | bc)
bps_final=$(echo "scale=3; ($c_bytes * 8) / $bytes" | bc)
#gain=$(echo "scale=3; ($c_bytes / $original_c_bytes)*100" | bc)
gain=$(echo "scale=3; (1-($c_bytes / $original_c_bytes))*100" | bc)
c_time=$(awk 'FNR ==1 {print $2}' $IN_FILE_SHORT_NAME-sort_bzip2-l$LEVEL.txt)
c_mem=$(awk 'FNR ==1 {print $4}'  $IN_FILE_SHORT_NAME-sort_bzip2-l$LEVEL.txt)
d_bytes=$(awk 'FNR ==2 {print $1}' $IN_FILE_SHORT_NAME-sort_size_d_bzip2-l$LEVEL.txt)
d_time=$(awk 'FNR ==1 {print $2}'  $IN_FILE_SHORT_NAME-sort_d_bzip2-l$LEVEL.txt)
d_mem=$(awk 'FNR ==1 {print $4}'  $IN_FILE_SHORT_NAME-sort_d_bzip2-l$LEVEL.txt)
diff=0
if [ $bytes -eq $d_bytes ] 
 then
  diff=0
else
  diff=1
fi
run=0

printf $program | tee program_x
printf $bytes | tee bytes_x
printf $level | tee level_x
printf $c_bytes | tee c_bytes_x
printf $bps_original | tee bps_original_x
printf $bps_final | tee bps_final_x
printf $gain | tee gain_x
printf $c_time | tee c_time_x
printf $c_mem | tee c_mem_x
printf $d_time | tee d_time_x
printf $d_mem | tee d_mem_x
printf $diff | tee diff_x
printf $run | tee run_x
 

file="data_bzip2.csv"

{
ed -s "$file" <<EOF
1
i
$program,$level,$bytes,$c_bytes,$bps_original,$bps_final,$gain,$c_time,$c_mem,$d_time,$d_mem,$diff,$run
.
wq
EOF
}

else

program="bzip2_$IN_FILE_SHORT_NAME-sortmf"
level=$LEVEL
bytes=$(ls $IN_FILE* -la -ltr | grep \.fasta$ |awk '{print $5;}')
c_bytes=$(awk 'FNR ==1 {print $1}' $IN_FILE_SHORT_NAME-size_bzip2-l$LEVEL.txt)
original_c_bytes=$(awk 'FNR ==1 {print $1}' $IN_FILE_SHORT_NAME-size_bzip2-l$LEVEL.txt)
bps_original=$(echo "scale=3; ($original_c_bytes * 8) / $bytes" | bc)
bps_final=$(echo "scale=3; ($c_bytes * 8) / $bytes" | bc)
#gain=$(echo "scale=3; ($c_bytes / $original_c_bytes)*100" | bc)
gain=$(echo "scale=3; (1-($c_bytes / $original_c_bytes))*100" | bc)
c_time=$(awk 'FNR ==1 {print $2}' $IN_FILE_SHORT_NAME-bzip2-l$LEVEL.txt)
c_mem=$(awk 'FNR ==1 {print $4}'  $IN_FILE_SHORT_NAME-bzip2-l$LEVEL.txt)
d_bytes=$(awk 'FNR ==1 {print $1}' $IN_FILE_SHORT_NAME-size_d_bzip2-l$LEVEL.txt)
d_time=$(awk 'FNR ==1 {print $2}'  $IN_FILE_SHORT_NAME-d_bzip2-l$LEVEL.txt)
d_mem=$(awk 'FNR ==1 {print $4}'  $IN_FILE_SHORT_NAME-d_bzip2-l$LEVEL.txt)
diff=0
if [ $bytes -eq $d_bytes ] 
 then
  diff=0
else
  diff=1
fi
run=0

printf $program | tee program_x
printf $bytes | tee bytes_x
printf $level | tee level_x
printf $c_bytes | tee c_bytes_x
printf $bps_original | tee bps_original_x
printf $bps_final | tee bps_final_x
printf $gain | tee gain_x
printf $c_time | tee c_time_x
printf $c_mem | tee c_mem_x
printf $d_time | tee d_time_x
printf $d_mem | tee d_mem_x
printf $diff | tee diff_x
printf $run | tee run_x
 

file="data_bzip2.csv"

{
ed -s "$file" <<EOF
1
i
$program,$level,$bytes,$c_bytes,$bps_original,$bps_final,$gain,$c_time,$c_mem,$d_time,$d_mem,$diff,$run
.
wq
EOF
}

fi
}

#--------MAIN---------------------------------------------------#

#testes com CVDB.fasta
#sorting CVDB.fasta file
INPUT_FILE=$(GENERATE_ALCOR_FILE)


#INPUT_FILE_SHORT_NAME=$(ls -1 $INPUT_FILE | sed 's/.fasta//g')
#echo $INPUT_FILE_SHORT_NAME

{  /bin/time -f "TIME\t%e\tMEM\t%M" ./FASTA_ANALY -sort=S $INPUT_FILE sort_fanalysis_$INPUT_FILE 5 ;  } 2>>ordering_times.txt 
{  /bin/time -f "TIME\t%e\tMEM\t%M" ./a.out $INPUT_FILE sort_$INPUT_FILE ;  } 2>> sortmf_times.txt

#Tests performed by
#JARVIS3 
rm *.txt

#levels_array=("1","2","3","4","5","6","7","8","9","10","11","12","13","14","15")
partitions_array=("10MB" "100MB" "1GB")
partitions_in_mb=("10" "100" "1000")
program=("" "sortmf" "fasta_analysis")
filename=("" "sort" "sort_fa")
sequence_type=("" "Alcor")
levels_array=("1" "5" "10" "15" "20" "25" "30")

j=0
for ((i=0; i<${#levels_array[@]}; i++)); do
j=0
 while (($j < ${#partitions_array[@]} )); do
    JARVIS3_COMPRESSION $INPUT_FILE ${levels_array[i]} ${partitions_array[j]} ${partitions_in_mb[j]} ;

  j=$((j+1))
 done
done

#NAF
levels_array=("1" "8" "15" "22")

for ((i=0; i<${#levels_array[@]}; i++)); do

NAF_COMPRESSION $INPUT_FILE ${levels_array[i]} ;

done

#MBGC
levels_array=("0" "1" "2" "3")

for ((i=0; i<${#levels_array[@]}; i++)); do
MBGC_COMPRESSION $INPUT_FILE ${levels_array[i]};
done

#MFC
levels_array=("0" "1" "2" "3")
partitions_array=("1" "4" "8")
#Levels for
for ((i=0; i<${#levels_array[@]}; i++)); do

#Partitions
  for((j=0; j<${#partitions_array[@]}; j++)); do
    MFCOMPRESS_COMPRESSION $INPUT_FILE ${levels_array[i]} ${partitions_array[j]} ;
 done
done 

#General Use Compressors
levels_array=("1" "4" "7" "9")

#gzip

#execution mode
for((i=0; i<${#levels_array[@]}; i++)); do

  GZIP_COMPRESSION $INPUT_FILE ${levels_array[i]};
done


#lzma
levels_array=("1" "4" "7" "9")

#execution mode
for((i=0; i<${#levels_array[@]}; i++)); do

  LZMA_COMPRESSION $INPUT_FILE ${levels_array[i]};
done

#bzip2
levels_array=("1" "4" "7" "9")

#execution mode
for((i=0; i<${#levels_array[@]}; i++)); do

  BZIP2_COMPRESSION $INPUT_FILE ${levels_array[i]};
done

rm data.csv


  # IN_FILE="$1";
  # LEVEL="$2";
  # PARTITION="$3";
  # PARTITION_MB="$4";
  # SORTING_ALGORITHM="$5";


#CSV_BUILDER JARVIS3
for ((i=${#levels_array[@]}-1; i>=0; i--))
 do
  for ((j=${#partitions_array[@]}-1; j>=0; j--))
   do
    for ((k=${#program[@]}-1; k>=0; k--))
     do
      CSV_BUILDER_JARVIS3 $INPUT_FILE ${levels_array[i]} ${partitions_array[j]} ${partitions_in_mb[j]} ${program[k]}

     done
    done
   done

#CSV_BUILDER NAF
for ((i=${#levels_array[@]}-1; i>=0; i--))
 do
   for ((k=${#program[@]}-1; k>=0; k--))
     do
      CSV_BUILDER_NAF $INPUT_FILE ${levels_array[i]} ${program[j]}
   done
  done